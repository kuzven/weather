from django.test import TestCase
from django.urls import reverse
from .models import CitySearchHistory


class WeatherEdgeCaseTests(TestCase):
    def test_get_weather_empty_city(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞."""
        response = self.client.get(reverse("get_weather"), {"city": ""})
        self.assertEqual(response.status_code, 200)
        self.assertIn("error", response.json())

    def test_get_weather_none_city(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'city'."""
        response = self.client.get(reverse("get_weather"))
        self.assertEqual(response.status_code, 200)
        self.assertIn("error", response.json())

    def test_get_weather_long_city(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞."""
        long_city_name = "–ì–æ—Ä–æ–¥" * 100  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        response = self.client.get(reverse("get_weather"), {"city": long_city_name})
        self.assertEqual(response.status_code, 200)
        self.assertIn("error", response.json())

    def test_get_weather_numeric_city(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."""
        response = self.client.get(reverse("get_weather"), {"city": "123456"})
        self.assertEqual(response.status_code, 200)
        self.assertIn("error", response.json())

    def test_get_weather_special_chars(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—Å–æ–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        response = self.client.get(reverse("get_weather"), {"city": "@#$%^&*"})
        self.assertEqual(response.status_code, 200)
        self.assertIn("error", response.json())

    def test_get_weather_mixed_case(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –±—É–∫–≤."""
        response = self.client.get(reverse("get_weather"), {"city": "–º–û—Å–ö–≤–∞"})
        self.assertEqual(response.status_code, 200)
        self.assertIn("weather", response.json())  # API –¥–æ–ª–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä


class AutocompleteCityTests(TestCase):
    def test_autocomplete_no_query(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ query."""
        response = self.client.get(reverse("autocomplete_city"))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_empty_query(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è query."""
        response = self.client.get(reverse("autocomplete_city"), {"query": ""})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_long_query(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        long_query = "–ì–æ—Ä–æ–¥" * 100  # 500 —Å–∏–º–≤–æ–ª–æ–≤
        response = self.client.get(reverse("autocomplete_city"), {"query": long_query})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_special_chars(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ query."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "@#$%^&*"})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_numeric_query(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "12345"})
        self.assertEqual(response.status_code, 200)
        cities = response.json().get("cities", [])

        for city in cities:
            self.assertFalse(city["name"].isdigit())  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ù–ï —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä


class AutocompleteCityEdgeCaseTests(TestCase):
    def test_autocomplete_single_emoji(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º emoji."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "üåç"})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_mixed_emoji(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –±—É–∫–≤ –∏ emoji."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "–ú–æ—ÅüåÜ"})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_multiple_emoji(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º emoji –ø–æ–¥—Ä—è–¥."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "üî•üî•üî•"})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])

    def test_autocomplete_special_symbols(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ–¥–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (‚úàÔ∏èüèùÔ∏èüöÄ)."""
        response = self.client.get(reverse("autocomplete_city"), {"query": "‚úàÔ∏èüèùÔ∏èüöÄ"})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json().get("cities"), [])
